// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCSDemoProjectAlcoaWebApi.Model;

namespace TCSDemoProjectAlcoaWebApi.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20200409130335_Initial-Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.CityDetails", b =>
                {
                    b.Property<long>("cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("cityname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("stateidfk")
                        .HasColumnType("bigint");

                    b.HasKey("cityid");

                    b.HasIndex("stateidfk");

                    b.ToTable("CityDetails");
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.CountryDetails", b =>
                {
                    b.Property<long>("countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("countryname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("countryid");

                    b.ToTable("CountryDetails");
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.StateDetails", b =>
                {
                    b.Property<long>("stateid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("countryidfk")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("statename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stateid");

                    b.HasIndex("countryidfk");

                    b.ToTable("StateDetails");
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.UserRoles", b =>
                {
                    b.Property<long>("roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("rolename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleid");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.UsersDetailInfo", b =>
                {
                    b.Property<long>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("cityidfk")
                        .HasColumnType("bigint");

                    b.Property<long>("countryidfk")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobileno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("roleidfk")
                        .HasColumnType("bigint");

                    b.Property<long>("stateidfk")
                        .HasColumnType("bigint");

                    b.HasKey("userid");

                    b.HasIndex("roleidfk");

                    b.ToTable("UsersDetailInfo");
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.CityDetails", b =>
                {
                    b.HasOne("TCSDemoProjectAlcoaWebApi.Model.StateDetails", null)
                        .WithMany("CityDetails")
                        .HasForeignKey("stateidfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.StateDetails", b =>
                {
                    b.HasOne("TCSDemoProjectAlcoaWebApi.Model.CountryDetails", null)
                        .WithMany("StateDetails")
                        .HasForeignKey("countryidfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCSDemoProjectAlcoaWebApi.Model.UsersDetailInfo", b =>
                {
                    b.HasOne("TCSDemoProjectAlcoaWebApi.Model.UserRoles", null)
                        .WithMany("UsersDetailInfo")
                        .HasForeignKey("roleidfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
